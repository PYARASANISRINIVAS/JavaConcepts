Control flow in Java refers to the order in which statements are executed in a program. 
It allows you to control the flow of execution based on certain conditions and make decisions based on those conditions. 
Java provides several control flow statements.

1. Conditional Statements:
   - If Statement: 
   Executes a block of code if a specified condition is true.
      if (condition) {
       // Code to be executed if the condition is true
      }

   - If-else Statement:
    Executes one block of code if a condition is true and another block if the condition is false.
   
        if (condition) {
            // Code to be executed if the condition is true
        } else {
            // Code to be executed if the condition is false
        }
   

   - If-else if-else Statement:
    Executes different blocks of code based on multiple conditions.
        if (condition1) {
            // Code to be executed if condition1 is true
        } else if (condition2) {
            // Code to be executed if condition2 is true
        } else {
            // Code to be executed if all conditions are false
        }

   - Switch Statement: Executes different blocks of code based on the value of an expression.
   
        switch (expression) {
            case value1:
                // Code to be executed if the expression matches value1
                break;
            case value2:
                // Code to be executed if the expression matches value2
                break;
            default:
                // Code to be executed if none of the cases match the expression
                break;
        }

2. Looping Statements:
   - For Loop: Repeats a block of code for a specific number of times.
   
        for (initialization; condition; update) {
            // Code to be repeated
        }
   

   - While Loop: Repeats a block of code while a specified condition is true.
   
        while (condition) {
            // Code to be repeated
        }
   

   - Do-while Loop: Repeats a block of code at least once and continues repeating as long as a specified condition is true.

        do {
            // Code to be repeated
        } while (condition);


   - Enhanced For-each Loop: Iterates over elements of an array or a collection.
   
        for (dataType variable : arrayOrCollection) {
            // Code to be executed for each element
        }

3. Branching Statements:
   - Break Statement: Terminates the innermost loop or switch statement.
   
        break;


   - Continue Statement: Skips the current iteration of a loop and proceeds to the next iteration.
   
        continue;
   

   - Return Statement: Terminates the execution of a method and returns a value (if applicable).

        return value;
   

   - Throw Statement: Throws an exception and transfers control to the exception handling code.
   
        throw exception;
  

